Junit:- This is used for testing our functions.
Developers have to do 2 types of Testing
1)unit test
2)integration testing
--------------
Methods used in Junit are
1)assertEquals(25,cal.square(5));  -----25 is the expected o/p and ,cal.square(5) is the function to test.
----------------
Example-1
-------------------
public class Calculator 
{
public int square(int i)
{
	return i*i;
}
public String user(String string)
{
	return "Shubham";
}
public int sub(int i,int j)
{
	return i-j;
}
public int add(int i,int j)
{
	return i+j;
}
public String concat(String string1,String string2)
{
	return string1+string2;
}
}
----------------------------------------------
test
--------------------
import static org.junit.Assert.*;
import org.junit.Test;
public class CalculatorTest
{
Calculator cal=new Calculator();
@Test  //used to identify that a method is a test method
public void testSquare()
{
assertEquals(25,cal.square(5));
assertEquals(36,cal.square(6));
}
@Test
public void testUser()
{
	assertEquals("Shubham",cal.user("Shubham"));
}
@Test
public void stringTest1()
{
	String result=cal.concat("Hello", "EveryOne");
	assertEquals("HelloEveryOne",result);
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2);
}
}
----------------------------------------------
pom.xml
--------------------
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>
----------------------------------------------------
example-2
--------------------
import static org.junit.Assert.*;
import org.junit.Test;
public class Test1 
{
@Test
public void testmyProg()
{
String st1=new String("abc");
String st2=new String("abc");
String st3=null;
String st4="abc";
String st5="abc";
int val1=5;
int val2=6;
String[] expectedArray= {"one","two","three"};
String[] resultArray= {"one","two","three"};
assertEquals(st1,st2); //this is used to check 2 objects.
assertTrue(val1 < val2); //this is used to check 2 values.It will also check true or false
assertFalse(val1 > val2); //this is used to check 2 values.It will also check true or false
assertNotNull(st1); //check if the object is not null 
assertNull(st3); //check if the object is null 
assertSame(st4,st5); //check if the object references point to the same object.
assertNotSame(st1,st3); //check if the object references not point to the same object.
assertArrayEquals(expectedArray,resultArray);//check whether 2 arrays are equal to each other
}
}
----------------------------------------------------------------------------------------
example-3
-----------------
public class MaxNumber {

	public static int findMax(int arr[])
	{
	int max=0;
	for(int i=1;i<arr.length;i++)
	{
		if(max< arr[i])
			max=arr[i];
	}
	return max;
}
}
-------------------------------------------------------------------------------
import static org.junit.Assert.*;
import org.junit.Test;

public class TestMax 
{
@Test
public void testMax()
{
	assertEquals(14,MaxNumber.findMax(new int[] {1,2,3,14}));
	assertEquals(24,MaxNumber.findMax(new int[] {1,2,3,14,24}));
	
}
}
----------------------------------------------------------
check the class error
-----------------------------
import org.junit.runner.*;
import org.junit.runner.notification.Failure;
public class TestClassDemo 
{
public static void main(String[] args) {
	
	Result res=JUnitCore.runClasses(TestMax.class);
	for(Failure fail:res.getFailures())
	{
		System.out.println("The class is fauilure :"+fail.toString());
	}
	System.out.println("The class is successful :"+res.wasSuccessful());
}
}
----------------------------------------------------------
Annotation
--------------------
1)@BeforeClass:- This annotation specifies that method will be invoked only once ,before starting all the tests.

2)@Before :- This annotation specifies that method will be invoked before each test.

3)@After:- This annotation specifies that method will be invoked after each test.

4)@AfterClass :-  This annotation specifies that method will be invoked only once ,after finishing all the tests.

---------------------------------------------------------------------------------------
example-5
-------------------
import java.util.*;
public class Test2Demo 
{
	String str;
public static String reverseWord(String str)
{
	StringBuilder res=new StringBuilder();
	StringTokenizer token=new StringTokenizer(str,"");
	while(token.hasMoreTokens())
	{
		StringBuilder sb=new StringBuilder();
		sb.append(token.nextToken());
		sb.reverse();
		res.append(sb);
		res.append(" ");
	}
	return res.toString();
}
public static int cube(int n)
{
	return n*n*n;
}
}
-------------------------------
import static org.junit.Assert.*;
import org.junit.*;
public class AnnotationTest {

	@BeforeClass
	public static void beforeClass() throws Exception
	{
		System.out.println("First Before any Execution");
	}
	@Before
	public void beforeMethod() throws Exception
	{
		System.out.println("Before each Test Execution");
	}
	@Test
	public void testCube()
	{
		assertEquals(27,Test2Demo.cube(3));
	}

	
	
	  @Test public void reverseWord() {
	  System.out.println(Test2Demo.reverseWord("my name is khan"));
	  assertEquals("ym eman si nahk ",Test2Demo.reverseWord("my name is khan")); }
	 
	 
	@After
	public  void afterMethod() throws Exception
	{
		System.out.println("After each Test Execution");
	}
	@AfterClass
	public static void afterClass() throws Exception
	{
		System.out.println("Finally After All Execution");
	}
	
}
-----------------------------------------------------------------------------------------------













