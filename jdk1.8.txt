Java 1.8 features
--------------------------
1)Java is Object Oriented programming Language.
2)Java is simpler then c and c++ as we don't have pointer concept,Multiple Inheritance,operator overloading.
3)Java supports multi-threading or multi-tasking.
4)We can develop web-application,network application,standalone application and also mobile application.
5)In java we interface which support the concept of multiple inheritance.
6)In java we have constructor but no destructor.There is automatic garbage clearance.
7)java is secured language.we have 4 access specifier private,public,protected,default.

------------------------------------------
Data types
---------------------------------------------------------
primative datatype
-------------------------
1)byte - 1 byte
2)short - 2 bytes
3)int - 4 bytes
4)long - 8 bytes
5)char - 2 bytes
6)boolen - 1 bit
7)float - 4 bytes
8)double - 8 bytes
-----------------------------------------
derived datatype
----------------------------
1)String
2)array
----------------------------------------
Operator
-------------------
1)unary :-i++,++i,i--,--i

2)binary :-
i)arithmatic :- +,-,*,/,%(modules)
ii)comparative :- <,>,<=,>=
iii)assignment :- =,!=
iv)bitwise :- >>,<<
3)ternary :- :,?
--------------------------------------
we have 4 access specifier private,public,protected,default.

1)private :- if we declare variable and methods as private we can access it within the class only.
2)public :- if we declare variable and methods as public we can access it within the class,outside the class and also outside the package.
3)protected :- if we declare variable and methods as protected we can access it within the class and also outside the child class.
4)default :- if we declare variable and methods as default we can access it within the class ,out side the class but not outside the package.
------------------------------------------------------------------------------------------------------------------------
program-1
----------------
package monday;

public class First
{
public static void main(String[] args) 
{
System.out.println("Welcome to JDK1.8");	
}
}
-------------------------------------------------
program-2
----------------------
package monday;

public class First
{
public static void main(String[] args) 
{
byte a=10;
short b=20;
int c=30;
long d=40;
float e=5.6f;
double f=6.7;
String g="apple";
char h='a';
System.out.println(a+" "+b+" "+c);
System.out.println(d+" "+e+" "+f);
System.out.println(g+" "+h);
}
}
----------------------------------------------------------------
Class :- A class is a known as object framework.
A class contains variables and methods.
---------------------------------------------------------------------
Object is a reference pointer to the class.
We can access the variables and methods of a class using Object.
------------------------------------------------------------------------------
program-3
---------------------
package monday;
import java.lang.*;
import java.util.*;
public class First
{
int empno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter empno,name,address");
	empno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
System.out.println("the empno is "+empno);	
System.out.println("the emp name  is "+name);	
System.out.println("the emp address is "+address);	
}
public static void main(String[] args) {
	First obj=new First();
	obj.input();
	obj.display();
}
}

----------------------------------------------------------------------------------
Question-1
wap to enter a student data and display it.
rollno,name,physics,chem,maths marks.
-------------------------------------------------------------------------
Program-4
---------------------
package monday;
import java.lang.*;
import java.util.*;
public class First
{
int rollno;
String name,address;
float phy,chem,math,total;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address,phy,chem,math");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
	phy=ob.nextFloat();
	chem=ob.nextFloat();
	math=ob.nextFloat();
}
void display()
{
System.out.println("the rollnono is "+rollno);	
System.out.println("the name  is "+name);	
System.out.println("the address is "+address);	
System.out.println("phy"+phy+" chem"+chem+"math"+math);
System.out.println("the total is "+(phy+chem+math));
}
public static void main(String[] args) {
	First obj=new First();
	obj.input();
	obj.display();
}
}

----------------------------------------------------------------------------------------------------
Constructor
-----------------------------
A constructor is a method which has the same name as that of the class name.
It doesnot return any value.it doesnot have any return type.
There are 2 types of constructor
1)default constructor :- it is without any parameter.
2)parameterized constructor :- it is with parameter.
To access a constructor we require an object.
-----------------------------------------------------
program-5
--------------------
package monday;
import java.util.*;
class first
{
int rollno;//intance variable
String name,address;
first()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first(int rollno,String name,String address)//local variable
{
	this.rollno=rollno;//to differenciate between intance variable and local variable we use this
	this.name=name;//keyword.
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
}
class second
{
public static void main(String[] args) {
	first ob=new first();
	first ob1=new first(101,"ajay","bangalore");
	first ob2=new first(102,"trupti","orissa");
	ob1.display();ob2.display();
}
}
-------------------------------------------------------------
Difference between constructor and a method.
-----------------------------------------------------------------
1)a method can have any name but a constructor will have only the class name .
2)a method returns a value but constructor doesnot return any value.
----------------------
program-6
---------------------
package monday;
import java.util.*;
class first
{
int rollno;//intance variable
String name,address;
first()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first(int rollno,String name,String address)//local variable
{
	this.rollno=rollno;//to differenciate between intance variable and local variable we use this
	this.name=name;//keyword.
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+rollno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}
int sum(int a,int b) //method overloading
{
	return a+b;
}
float sum(float a,float b)
{
	return a+b;
}
}
class second
{
public static void main(String[] args) {
	first ob=new first();
	first ob1=new first(101,"ajay","bangalore");
	first ob2=new first(102,"trupti","orissa");
	ob1.display();ob2.display();
	System.out.println(ob1.sum(6, 6));//compiler will decide where to send the value
	System.out.println(ob1.sum(6.5f, 6.3f));
	
}
}
-----------------------------------------------------------------------
Question-2
wap to create a parameterized constractor .pass the values and display it.
employee :- empno,name,designation,salary.
-------------------------------------------------------------------------------------------------------------
program-7
---------------------
package monday;
import java.util.*;
class first1
{
int empno;//intance variable
String name,address;
first1()
{
	System.out.println("this is a default constructor which is without any parameter");
}
first1(int rollno,String name,String address)//local variable
{
	this.empno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is "+empno);
	System.out.println("the name is "+name);
	System.out.println("the address is "+address);
	}

}
class second2
{
public static void main(String[] args) {
	first1 ob=new first1();
	first1 ob1=new first1(101,"ajay","bangalore");
	first1 ob2=new first1(102,"trupti","orissa");
	ob1.display();ob2.display();
	
}
}
------------------------------------------------------------------------------------
setter() is used to set the values
getter() is used to get the values
-----------------------------------------------------------------
program-8
-----------------------
package monday;

public class Employee 
{
int empno;
String name,designation;
float salary;
//right click >source >generate getter and setter
public int getEmpno() {
	return empno;
}
public void setEmpno(int empno) {
	this.empno = empno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getDesignation() {
	return designation;
}
public void setDesignation(String designation) {
	this.designation = designation;
}
public float getSalary() {
	return salary;
}
public void setSalary(float salary) {
	this.salary = salary;
}


}
------------------------------------------------------------
package Wednesday;

public class Student 
{
int rollno;
String name,email;
public int getRollno() {
	return rollno;
}
public void setRollno(int rollno) {
	this.rollno = rollno;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public String getEmail() {
	return email;
}
public void setEmail(String email) {
	this.email = email;
}

}
--------------------------------------------------------------------------
package Tuesday;
import Wednesday.Student;
import monday.Employee;
public class Test 
{
public static void main(String[] args)
{
	Employee ob=new Employee();
	ob.setEmpno(101);
	ob.setName("Trupti");
	ob.setDesignation("software eng");
	ob.setSalary(45000.50f);
	System.out.println(ob.getEmpno());
	System.out.println(ob.getName());
	System.out.println(ob.getSalary());
	System.out.println(ob.getDesignation());
	Student ob1=new Student();
	ob1.setRollno(102);
	ob1.setName("Madhu");
	ob1.setEmail("Madhu@gmail.com");
	System.out.println(ob1.getRollno());
	System.out.println(ob1.getName());
	System.out.println(ob1.getEmail());
}
}

---------------------------------------------------------------------------------------------
Program-9
-------------------
package Tuesday;
import java.util.*;
public class ArrayDemo 
{
public static void main(String[] args) 
{
Scanner ob=new Scanner(System.in);
System.out.println("enter 5 nos");
int a[]=new int[5];
for(int i=0;i<5;i++)
	a[i]=ob.nextInt();

System.out.println("the 5 nos are");
for(int i=0;i<5;i++)
	System.out.println(a[i]);
}
}
----------------------------------------------------------
Program-10
--------------------
package Tuesday;
import java.util.*;
public class Student1 
{
	String rollno,name,address;
	void input()
	{
		Scanner ob=new Scanner(System.in);
		System.out.println("Enter rollno,name,address");
		rollno=ob.nextLine();//it excepts space in between
		name=ob.nextLine();
		address=ob.nextLine();
	}
	void display()
	{
		System.out.println("the rollno is "+rollno);
		System.out.println("the name is "+name);
		System.out.println("the address is "+address);
	}
	public static void main(String[] args) {
		Student1[] obj=new Student1[3];
		for(int i=0;i<3;i++)
		{
			System.out.println("enter data of student no"+(i+1));
			obj[i]=new Student1();
			obj[i].input();
		}
		for(int i=0;i<3;i++)
		{
			System.out.println("data of student no"+(i+1));
			obj[i].display();
		}

	}
}
----------------------------------------------------------------------
question-3
create a bank class 
accno,name,email,Balance for 20 customers.
store the data and display it.
-------------------------------------------------------------------------------
Inheritance
----------------------
It is one of the oops concept
Reuse of existing code.and we can add some more features to it.
example :- iPhone10 to iPhone11 some new features are add to the older version.
There are 5 types of Inheritance.
1)single Inheritance
2)multi-level Inheritance
3)hyrarchal Inheritance
----------------------Java doesn't support---------------------------------
4)multiple inheritance
5)Hybrid inheritance(combination)
------------------------------------------------------------------------------------
we use the keyword extends to inherite the parent class into the child class.
we use the keyword super to access the parent class variables and methods into the child class.
-------------------------------------------------------------------------------------
Program-11
------------------------
package Tuesday;
import java.util.*;
public class Student 
{
int rollno;
String name,address;
void input()
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter rollno,name,address");
	rollno=ob.nextInt();
	name=ob.next();
	address=ob.next();
}
void display()
{
	System.out.println("the rollno is"+rollno+"the name is "+name+"the address is "+address);
}
}
--------------------------------------------------------
package Tuesday;
import java.util.*;
public class Marks extends Student
{
int phy,chem,math,total,avg;
String grade;
void input()
{
	super.input();
	Scanner ob=new Scanner(System.in);
	System.out.println("enter phy,chem,math marks");
	phy=ob.nextInt();
	chem=ob.nextInt();
	math=ob.nextInt();
	total=phy+chem+math;
	avg=total/3;
	if(avg>70)
		grade="First Grade";
	else if(avg>60)
		grade="Second Grade";
	else if(avg>50)
		grade="Third Grade";
	else
		grade="Fail";
}
void display()
{
	super.display();
	System.out.println("the total is "+total);
	System.out.println("the average is "+avg);
	System.out.println("The grade is "+grade);
}
public static void main(String[] args)
{
	Marks ob=new Marks();
	ob.input();
	ob.display();
}
}
--------------------------------------------------------------------------------
wap to create a multi-level Inheritance
employee class :-empno,name,address
dept class:- loc,designation,dept
salary class :- salary,Hra,Itax
display the employee details
-----------------------------------------------------------------------------
How to use constructor during inheritance.
--------------------------------------------------------------------
program-12
----------------------------
package Tuesday;
public class Student 
{
int rollno;
String name,address;
Student(int rollno,String name,String address)
{
	this.rollno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is"+rollno+"the name is "+name+"the address is "+address);
}
}

-------------------------------------------------------------------------------------------
package Tuesday;
import java.util.*;
public class Marks extends Student
{
int phy,chem,math,total,avg;
String grade;
Marks(int rollno,String name,String address,int phy,int chem,int math)
{
	super(rollno,name,address);
	this.phy=phy;
	this.chem=chem;
	this.math=math;
	total=phy+chem+math;
	avg=total/3;
	if(avg>=70)
		grade="First Grade";
	else if(avg>=60)
		grade="Second Grade";
	else if(avg>=50)
		grade="Third Grade";
	else
		grade="Fail";
}
void display()
{
	super.display();
	System.out.println("the total is "+total);
	System.out.println("the average is "+avg);
	System.out.println("The grade is "+grade);
}
public static void main(String[] args)
{
	Marks ob=new Marks(101,"sandip","Bangalore",77,88,66);
	ob.display();
}
}
--------------------------------------------------------------------------------------------
program-13
-------------------------
package Tuesday;
public class Student 
{
int rollno;
String name,address;
Student(int rollno,String name,String address)
{
	this.rollno=rollno;
	this.name=name;
	this.address=address;
}
void display()
{
	System.out.println("the rollno is"+rollno+"the name is "+name+"the address is "+address);
}
}
-------------------------------------------------
package Tuesday;
import java.util.*;
public class Marks extends Student
{
int phy,chem,math,total,avg;
String grade;
Marks(int rollno,String name,String address,int phy,int chem,int math)
{
	super(rollno,name,address);
	this.phy=phy;
	this.chem=chem;
	this.math=math;
	total=phy+chem+math;
	avg=total/3;
	if(avg>=70)
		grade="First Grade";
	else if(avg>=60)
		grade="Second Grade";
	else if(avg>=50)
		grade="Third Grade";
	else
		grade="Fail";
}
void display()
{
	super.display();
	System.out.println("the total is "+total);
	System.out.println("the average is "+avg);
	System.out.println("The grade is "+grade);
}

}
----------------------------------------------------------------------
package Tuesday;

public class Address extends Marks
{
	String loc;
	Address(int rollno, String name, String address, int phy, int chem, int math,String loc) 
	{
		super(rollno, name, address, phy, chem, math);
	this.loc=loc;
	}
void display()
{
	super.display();
	System.out.println("the location is "+loc);
}
public static void main(String[] args) {
	Address ob=new Address(1001,"sandip","Bangalore",77,77,55,"north bangalore");
	ob.display();
}
}
-------------------------------------------------------------------------
*super constructor will execute first.
-----------------------------------------------------------------------
In inheritance the child class will depend upon the parent class.It is known as tight coupling.
Java supports loose coupling.
Inheritance(IS-A) relationship.
Aggregation(HAS-A) relationship.
example:-
Employee has-a address
Bank has-a customer
-------------------------------------------------------------------------------------
program-14
---------------------
package Wednesday;

public class Employee
{
int empno;
String name,phoneno;
Address address;
public Employee(int empno, String name, String phoneno, Address address) {
	this.empno = empno;
	this.name = name;
	this.phoneno = phoneno;
	this.address = address;
}
void display()
{
	System.out.println("empno :"+empno+"Name :"+name+"phone no :"+phoneno+"address :"+address);
}
}
----------------------------------------------------------------
package Wednesday;

public class Address
{
int streetno,roadno;
String city,state;
public Address(int streetno, int roadno, String city, String state)
{
	this.streetno = streetno;
	this.roadno = roadno;
	this.city = city;
	this.state = state;
}

@Override
public String toString() {
	return "Address [streetno=" + streetno + ", roadno=" + roadno + ", city=" + city + ", state=" + state + "]";
}

public static void main(String[] args) 
{
	Address address=new Address(10,20,"Bangalore","Karnataka");
	Employee emp=new Employee(101,"sandip","7766554433",address);
	emp.display();
}
}
---------------------------------------------------------------------------------------------------
wap to enter details of a (HAS-A)
Bank has-a customer
bank :- accno,branch,balance,customer(object of the customer class)
Customer :- custid,name,address
--------------------------------------------------------------------
Method Overloading:-
Method Overriding:-
Abstract class
Interface
static keyword
final keyword
-----------------------------------------------------------------------------------------------------------------
polymorphism:-
Method Overloading :- compile time Polymerphism.we need one class.
The method name is same but the return type and parameter has different data type.
example:-
int sum(int a,int b);
float sum(float a,float b);
--------------------------------------------------------
program-15
-------------------
package Wednesday;

public class MethodOverloading 
{
int sum(int a,int b)
{
	return a+b;
}
int sum(int a,int b,int c)
{
	return a+b+c;
}
float sum(float a,float b)
{
	return a+b;
}
double sum(double a,double b)
{
	return a+b;
}
public static void main(String[] args) {
	MethodOverloading ob=new MethodOverloading();
	System.out.println("the sum is "+ob.sum(6, 7));
	System.out.println("the sum is "+ob.sum(6,7,8));
	System.out.println("the sum is "+ob.sum(6.5f, 7.3f));
	System.out.println("the sum is "+ob.sum(6.53, 7.32));
		}
}

------------------------------------------------------------------------------------------------------
Method Overriding:- runtime Polymerphism.(abstract class,Interface).we need two or more class.
------------------------------------------------------------------------------------------------------
program-16
---------------------
package Wednesday;
class Parent
{
void display()
{
	System.out.println("This is a parent class");
}
}
public class MethodOverriding extends Parent
{
	void display()
	{
		System.out.println("this is new display method");
	}
	public static void main(String[] args) 
	{
		MethodOverriding ob=new MethodOverriding();
		ob.display();
	}
}

-----------------------------------------------------------------
Here in the parent class we have the display().
In the child class we have display().We are creating object of the child class.
The child class display() is overriding on the parent class display().The parent class display() is hidden.
----------------------------------------------------------------------------
Abstract class
------------------------
It is a class which contain abstract method means method without body.
It can also contain method with body known as concret method.
we cannot create object of the abstract class.
we have to inherite it into a child class where we have to override the abstract methods.
Then we can create object for the child class.
We cannot have a method without body .we have to declare it as abstract or it should be inside the interface.
What is the use of abstract class.
It contains some abstract methods which has to be overriden inside the child class.
We can have a constructor in the abstract class.
*abstract windowing toolkit(AWT)

-------------------------------------------------------------------
program-17
------------------
package Wednesday;
abstract class Abstract1
{
Abstract1()
{
	System.out.println("this is a constractor");
}
abstract void display();
int sum(int a,int b)
{
	return a+b;
}
}
class AbstractDemo extends Abstract1
{
	@Override
	void display() 
	{
		System.out.println("This is display");
		}
	public static void main(String[] args) {
		AbstractDemo ob=new AbstractDemo();
		System.out.println("the sum is "+ob.sum(6, 3));
		ob.display();
	}
}
-----------------------------------------------------------------------------
Program-18
---------------------
package Wednesday;
abstract class Abstract1
{
Abstract1()
{
	System.out.println("this is a constractor");
}
Abstract1(int a,int b)
{
	System.out.println("the sum of super constrctor is "+(a+b));
}
abstract void display();
int sum(int a,int b)
{
	return a+b;
}
}
class AbstractDemo extends Abstract1
{
	AbstractDemo()
	{
		super();
	}
	AbstractDemo(int a,int b)
	{
		super(a,b);
	}
	@Override
	void display() 
	{
		System.out.println("This is display");
		}
	public static void main(String[] args) {
		AbstractDemo ob=new AbstractDemo(7,8);
		AbstractDemo ob1=new AbstractDemo();
		System.out.println("the sum is "+ob.sum(6, 3));
		ob.display();
	}
}
--------------------------------------------------------------------------
Create a abstract class bank 
having abstract methods register(),apply for loan,credit card,dedit card.
create a child class customer .override all the methods and create object.
--------------------------------------------------------------------------------------------
Interface:-
It is similar to abstract class but it only contains abstract methods no concrete methods.we don't use the keyword abstract in this.
We cannot create object for an interface.
We have to implement the interface into a child class.
We have to override the abstract methods into a child class and create object for the child class.
By interface java performs the multiple Inheritance.
we can declare a variable inside a interface .this is by default static(we can access it without object )
and final(cann't be changed)
--------------------------------------------------------------------------------------------------
progarm-19
-----------------------
package Wednesday;
 interface Interface1
 {
void display1();
}
 interface Interface2 extends Interface1
 {
void display2();
}
 interface Interface3
 {
void display3();
}
 interface Interface4 
 {
void display4();
}
 class InterfaceDemo implements Interface2,Interface3,Interface4
 {
	@Override
	public void display1() {
				System.out.println("display1");	 }
	@Override
	public void display4() {
		System.out.println("display4");		}
	@Override
	public void display3() {
		System.out.println("display3");			}
	@Override
	public void display2() {
		System.out.println("display2");
			}
	 public static void main(String[] args) {
		 InterfaceDemo ob=new InterfaceDemo();
	ob.display1(); ob.display2(); ob.display3();  ob.display4();
	}
 }
 -------------------------------------------------------------------------------------------------------------------
 program-20
-------------------------
package Wednesday;
 interface Interface1
 {
	 int a=10;//this is by default static(we can access it without object and final(cann't be changed)
void display1();
}
 interface Interface2 extends Interface1
 {
void display2();
}
 interface Interface3
 {
void display3();
}
 interface Interface4 
 {
void display4();
}
 class InterfaceDemo implements Interface2,Interface3,Interface4
 {
	@Override
	public void display1() {
				System.out.println("display1");	 }
	@Override
	public void display4() {
		System.out.println("display4");		}
	@Override
	public void display3() {
		System.out.println("display3");			}
	@Override
	public void display2() {
		System.out.println("display2");
			}
	 public static void main(String[] args)
	 {
		 System.out.println("the value of a is "+a);
		 InterfaceDemo ob=new InterfaceDemo();
		 ob.display1(); ob.display2(); ob.display3();  ob.display4();
	}
 }
 -----------------------------------------------------------------------------------------------------------------------
 static :- we can declare a variable as static,method as static,we can have static block and we can have static class.
We can access it without creating an object.
We can access it with the help of the class name.
A single copy of the static variable,method,block or class is created in the JVM.
It is used for memory management.
If we declare a static block it execute before the main method.
---------------------------
progarm-21
---------------------------
package Wednesday;
public class StaticDemo 
{
static int rollno=10;
static String name="trupti";
static String address="orissa";
static void display()
{
	System.out.println(rollno+ " "+name+"  "+address);
}
static
{
	System.out.println("This is a static block");
}
public static void main(String[] args)
{
System.out.println("rollno is "+rollno);	
System.out.println("the name is "+StaticDemo.name);
System.out.println("the address is"+StaticDemo.address);
display();
StaticDemo.display();
}}
 ----------------------------------------------------------------------------------------------
 we cannot access a non-static variables inside a static method.
we can access static variables inside a non-static method.
program-22
----------------------
package Wednesday;
public class StaticDemo 
{
static int rollno=10;
static String name="trupti";
 static String address="orissa";
static void display()//we cannot access a non-static variable inside a static method.
{
	System.out.println(rollno+ " "+name+"  "+address);
}
static 
{
	System.out.println("This is a static block");
}
public static void main(String[] args)//we cannot access a non-static variable inside a static method.
{
System.out.println("rollno is "+rollno);	
System.out.println("the name is "+StaticDemo.name);
System.out.println("the address is"+StaticDemo.address);
display();
StaticDemo.display();
}}
--------------------------------------------------------
Once incremented the static variable value remain incremented.
 program-23
--------------------------

package Wednesday;
public class StaticDemo 
{
static int rollno=10;
static String name="trupti";
 static String address="orissa";
 static int i;
static void display()//we cannot access a non-static variable inside a static method.
{
	System.out.println(rollno+ " "+name+"  "+address);
}
static void counter()
{
	i++;
	System.out.println(i);
}
static 
{
	System.out.println("This is a static block");
}
public static void main(String[] args)//we cannot access a non-static variable inside a static method.
{
System.out.println("rollno is "+rollno);	
System.out.println("the name is "+StaticDemo.name);
System.out.println("the address is"+StaticDemo.address);
display();
StaticDemo.display();
counter();
counter();
counter();
counter();
}}
----------------------------------------------------------------------------------------------------
 final keyword
-------------------------
This is a done to protect the data.
We can declare the variable as final,method as final and class as final.
If we declare variable as final we have to assign it and it cannot be changed.
If we declare method as final we cannot override it.
If we declare a class as final we cannot inherite it.
--------------------------------------------------------------------------------------------------
program-24
-----------------------
package Wednesday;
public final class FinalDemo 
{
final int a=10;
final void display()
{
	System.out.println("this is final display");
}
public static void main(String[] args) {
	FinalDemo ob=new FinalDemo();
	ob.display();
	System.out.println("the value of a is"+ob.a);
}
}
------------------------------------------------------------------------------ 
 create an interface employee :- 
input details(empno,name,address);
display details();
-------------------------------------------------
create an interface dept:-
input deatils(deptno,name,loc)
display deatils();
------------------------------------------------------
create a child class to take input and display the details
--------------------------------------------------------------------------------------
static class:- It is used in the case of inner class.A inner class can be static.
syntax:-
class outer 
{
static int rollno=20;
static class inner
{
}
main
{
outer.inner obj=new outer.inner();
}}
---------------------------------------------------------------
program-25
------------------------
package Thrusday;

public class OuterClass 
{
static int rollno=10;//class variable,global variables can be accessed anywhere within the program
static String name="sandip";
static class inner
{
	void display()
	{
		System.out.println("The rollno is "+rollno);
		System.out.println("The name is "+name);
	}
}
public static void main(String[] args) 
{
OuterClass.inner obj=new OuterClass.inner();
obj.display();
}
}
------------------------------------------------------------------
we can take the class as public or default.
we cannot declare the class as private or protected.
Because the class has to be accessed by the JVM which is out side the class.
JVM can access default or public access specifier.
-------------------------------------------------------------------------
Wrapper class
----------------------
All datatypes in java are also class known as wrapper class.
1)byte -Byte
2)short - Short
3)int - Integer
4)float - Float
5)double - Double
6)String
7)long - Long
8)char - Character
9)boolean - Boolean
These class belongs to lang package.It is a default package.
---------------------------------------------------------------------
javap java.lang package ---->Integer
javap java.lang.String
javap java.lang.Object -------super class in java.
------------------------------------------------------------------ 
program-26
----------------------
package Thrusday;
public class Test1
{
public static void main(String h[]) 
{
String a=h[0];
String b=h[1];
String c=h[2];
int x=Integer.parseInt(a);
int y=Integer.parseInt(b);
int z=Integer.parseInt(c);
int sum=x+y+z;
System.out.println("the sum is "+sum);
}
}
--------------------------------------------------------------------
package Thrusday;
public class Test1
{
public static void main(String h[]) 
{
String a=h[0];
String b=h[1];
String c=h[2];
float x=Float.parseFloat(a);
float y=Float.parseFloat(b);
float z=Float.parseFloat(c);
float sum=x+y+z;
System.out.println("the sum is "+sum);
}
}
----------------------------------------------------------
public static void main(String h[]) 

public is a access specifier so that JVM can access the main method which is outside the package.
static is used so that we can access static variables and methods inside it.and we need not create object of the main()
void is the return type.
main is the keyword for making the method as main.
(String h[]) -- we can pass string arguments inside it.
---------------------------------------------------------------------------------------------
constructor :-
First obj=new First();
First is the class name.
obj is the reference pointer to the class.
new is a keyword which creates the memory block for storing the data.
First() is a default constructor.
-------------------------------------------------------------------------------------------------------------
Exception Handling
------------------------------
There are 3 type of error.
1)compile time error.(manually)
2)logical error(manually)
3)runtime error.
In exception handling we will discuss about only runtime error.
example:-
-------------------
1)dividing a number by zero.
2)crossing the array limit.
3)entering a character in place to number.
The aim of exception handling is we don't want the program to terminate in between.
The program should display an error message but the flow of the program should be till the end.
----------------------------------------------------------------------------
There are 5 keywords used to handle the runtime errors.
1)try
2)catch
3)finally
4)throw
5)throws
------------------------------------------------------------------------------------------------
program-27
----------------------
//The main purpose is to run the program till the end
//java.lang.ArithmeticException the program is terminated we have to handle the error.
//we have to put into a try ,catch block.where we suspect that error may occur.

package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) 
{
	try
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a/b;
System.out.println("The result is "+c);
	}
	catch(Exception ae)
	{
		System.out.println("the error is "+ae);
	}
System.out.println("The end of the program");
}
}
-----------------------------------------------------------------
In this case when there is error means we divide the number by zero.
The catch will execute and display the error message.Then the rest part of the program will execute.
-------------------------------------------------------------------------------------------------------
when there is no error the catch block will not execute.The program will execute normally.
--------------------------------------------------------------------------------------------------
There are 3 type of Exception
--------------------------------------------
1)checked exception(we have to handle it first otherwise it will give compile time error.)
i)IOException
ii)SQLException
iii)ClassNotFoundException
iv)Interrupted Exception
-----------------------------------------------------------------
2)unchecked exception
i)Arithmatic exception
ii)NumberFormat exception
iii)IndexOutOfBound exception
iv)NullPointer exception
--------------------------------------------
3)error
i)StackOverFlow error
ii)OutOfMemory error
iii)Machine error
-----------------------------------------------
program-28
-------------------------
Try with multiple catch
-------------------------------------
//try with multiple catch
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) 
{
	try
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a/b;
System.out.println("The result is "+c);
	}
	catch(ArithmeticException ae)
	{
		System.out.println("the error is "+ae);
	}
	catch(InputMismatchException ae)
	{
		System.out.println("the errorr is "+ae);
	}
	catch(Exception ae) //this can handle all types of error
	{
		System.out.println("the errorrr is "+ae);
	}
System.out.println("The end of the program");
}
}
-------------------------------------------------------------------------
* we cannot put the catch(Exception ae) above the catch(ArithmeticException ae) or catch(InputMismatchException ae).
This will show error unreachable code.
because catch(Exception ae) will handle all type of errors.but catch(ArithmeticException ae) will handle only Arithmatic exception.
--------------------------------------------------------------------------------------------------------------------------------
We generally don't write so many catch block .It will increase the line of code.
and the execution time also increases.so it in not adviceable to write multiple catch block.
--------------------------------------------------------------------
try-catch :-if try is getting error then the catch with handle the error and catch will display the error.
try-finally:-In this if try gets a error or not it doesn't matter the finally block will definatelly exceute.
It handles the error and mainly used for closing of connection,file closing etc.
Can we write try block without catch block.
yes using finally block.
--------------------------------------------------------------------------------------------------------------------
 Example-29
---------------------------
//try with finally
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) 
{
	try
	{
Scanner ob=new Scanner(System.in);
System.out.println("Enter 2 nos");
int a=ob.nextInt();
int b=ob.nextInt();
int c=a/b;
System.out.println("The result is "+c);
	}

	finally
	{
	System.out.println("The end of the program");
	}
}
}
------------------------------------------------------------------------------------------------------------------
throws Exception:-
-------------------------------
we don't require any body for throws exception .we mention it with the method.
This is mostly used with checked exception.
when we work with IOException,SQLException,Interrupted Exception etc.
------------------------------------------------------------------
program-30
-----------------------
package Thrusday;
public class ErrorExample 
{
public static void main(String[] args) throws Exception
{
	for(int i=1;i<=10;i++)
	{
		System.out.println(i);
		Thread.sleep(1000);//interrupt the flow of control
	}
}
}
---------------------------------------------------------------------------
*sleep is a static method so we call it using the class name.
Thread is a class belongs to lang package.
Thread.sleep(1000);
------------------------------------------------------------------
throw keyword
--------------------------------
It is used for user defined exception.
example :- 
1)age should be greater than or equal to 18 years to cast your vote.
2)salary of employee should be greater than 15000.
3)marks should be greater than zero.
------------------------------------------------------------------------
program-31
---------------------
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) throws Exception
{
	Scanner ob=new Scanner(System.in);
	System.out.println("enter your age to cast your vote");
	int age=ob.nextInt();
	if(age>=18)
		System.out.println("your are eligible to cash your vote");
	else
		throw new Exception("The age should be greater than or equal to 18 to caste your vote");
}
}
----------------------------------------------------------------------------
ArrayIndexOutOfBound Exception(crossing the array limit)
----------------------------------------------------------------------
This error occur when we cross the array limit.
example :- if the array size is 5 and we are entering 6 elements it will throw an error that is ArrayIndexOutOfBound exception.
--------------------------------------------------------------------------------------------------------
program-32
-----------------------
package Thrusday;
import java.util.*;
public class ErrorExample 
{
public static void main(String[] args) throws Exception
{
	try
	{
	int a[]=new int[5];
	Scanner ob=new Scanner(System.in);
	System.out.println("enter 5 nos");
for(int i=0;i<5;i++)
	a[i]=ob.nextInt();
System.out.println("5 nos are");
for(int i=0;i<=5;i++)
System.out.println(a[i]);
	}
	catch(Exception ae)
	{
		ae.printStackTrace();
	}

}
}
----------------------------------------------------------------------------------------------------------------
wap to enter am employees data.
1)empno it should only contain number.
2)name
3)age it should be greater than 20 years to do this job.
4)qualification should be Btech.
if all the critaria are ok then he/she is eligible to do the job
----------------------------------------------------------------------------------------------
program-33
-------------------
package Friday;
import java.util.*;
class GFG
{
    public static void main (String[] args)throws Exception
    {
    	Scanner ob=new Scanner(System.in);
          try
    {
      System.out.println("enter empno :");
        String str =ob.next();
        int num = Integer.parseInt(str);
            }
    catch(NumberFormatException ex)
    {
           System.out.println("Enter only number");
              }
         finally
    {
        System.out.println("Enter name,age and qualification");
        String name=ob.next();
        int age=ob.nextInt();
        String qual=ob.next();
        if(age>=20 && qual.equalsIgnoreCase("btech"))
        	System.out.println("you are eligible");
        else
        	throw new Exception("not eligible");
    }
    }
}
----------------------------------------------------------------------------------
Lambda Expression
--------------------------------
It is also known as functional interface.
In this the interface will only contain one abstract method so it is called functional interface.
In lambda expression we don't require 2 classes (parent and child).we don't have to override.we don't have to implement the interface.
There is a anotation @FunctionalInterface.
It is used to declare an interface as functional interface.(optional)
------------------------------------------------------------------------
@Override :- It was introduced from jdk1.5.It will match the methods of the parent class and the child class.
both method name and the signatures(return type,parameter) should match.(optional)
-------------------------------------------------------------------------
what is the use of lambda expression
1)The code is reduced in this.
2)To provide the implementation of functional interface.
3)Generally a interface is non-functional we have to override into the child class and introduce some functionality.
example:- 
interface bank
{
void loan();  <------these are non-functional
void applyforCreditCard();
}
------------------------------------------------------------------
*by using lambda expression we will make the interface as functional.
----------------------------------------------------------------------
There are 3 new components in it.
1)Arguument-list:-It can be empty or have parameters.
(),->,{body}
2)Arrow-token:- It is used to link arguments-list and body of the expression.
3)Body:- It contains the expression and statement .
--------------------------------------------------------------------------------------------
()->{System.out.println("Hello");} //no parameter
----------------------------------------------------------------
(a)->{System.out.println("Hello");} //single parameter
----------------------------------------------------------------
(a,b)->{System.out.println("Hello");} //multiple parameter
----------------------------------------------------------------
program-34
--------------------
package Friday;
@FunctionalInterface
interface example1
{
	public void display();  //only one abstract method
}
public class Lambda1
{
public static void main(String[] args) 
{
int length=10;
int breadth=20;
example1 obj=()->
{
	System.out.println("the length is "+length);
	System.out.println("the breadth is "+breadth);
	System.out.println("the area is "+(length*breadth));
};
obj.display();
}
}
------------------------------------------------------------------------------------
program-35
-------------------
package Friday;
@FunctionalInterface
interface example1
{
	public void display(); //only one method
}
@FunctionalInterface
interface example2
{
	public String name();
}

@FunctionalInterface
interface example3
{
	public String address(String loc);
}
@FunctionalInterface
interface example4
{
	public int sum(int a,int b);
}

public class Lambda1
{
public static void main(String[] args) 
{
int length=10;
int breadth=20;
example1 obj=()->     //display method defined
{
	System.out.println("the length is "+length);
	System.out.println("the breadth is "+breadth);
	System.out.println("the area is "+(length*breadth));
};
obj.display();

example2 obj1=()->
{
	return "Lambda Expression";
};
System.out.println(obj1.name());

example3 obj2=(loc)->
{
	return "My Loaction is :"+loc;
};
System.out.println(obj2.address("Bangalore"));

example4 obj3=(a,b)->(a+b);
System.out.println("the sum is "+obj3.sum(400,500));

}
}
---------------------------------------------------------------------------------------
package Friday;
@FunctionalInterface
interface example1
{
	public void display(); //only one method
}
@FunctionalInterface
interface example2
{
	public String name();
}

@FunctionalInterface
interface example3
{
	public String address(String loc);
}
@FunctionalInterface
interface example4
{
	public int sum(int a,int b);
}

public class Lambda1
{
public static void main(String[] args) 
{
int length=10;
int breadth=20;
example1 obj=()->     //display method defined
{
	System.out.println("the length is "+length);
	System.out.println("the breadth is "+breadth);
	System.out.println("the area is "+(length*breadth));
};
obj.display();

example2 obj1=()->
{
	return "Lambda Expression";
};
System.out.println(obj1.name());

example3 obj2=(loc)->
{
	return "My Loaction is :"+loc;
};
System.out.println(obj2.address("Bangalore"));

example4 obj3=(a,b)->
{
return a+b;
};
System.out.println("the sum is "+obj3.sum(400,500));
}}
-----------------------------------------------------------------------------------
wap to enter amount for withdraw or deposite.
Then display the balance amount.
Use case and switch and FunctionalInterface.
---------------------------------------------------------------------
We have 3 classes String,StringBuffer,StringBuilder
--------------------------------------------------------------------------
String :-Immutable(cannot be changed).
StringBuffer:-mutable(can be changed)
StringBuilder:-mutable(can be changed)
---------------------------------------------------------------------------
Progarm-36
----------------
package Friday;
public class StringDemo
{
public static void main(String[] args) {
	String s1="apple";
	String s2="apple";
	String s3=new String("apple"); //new memory block is created
	String s4=new String("apple");
	if(s1==s2) //constant pool
		System.out.println("true");
	else
		System.out.println("false");
	if(s1.equals(s2))
		System.out.println("true");
	else
		System.out.println("false");
	if(s1==s3)
		System.out.println("true");
	else
		System.out.println("false");
}
}
------------------------------------------------------------------------


























