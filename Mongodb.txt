mongod is the server.First start mongod.
mongo as the database.
------------------------------------------------------
databases:- Mysql,sqlserver,oracle ------>structured database(rows and columns)

Mongodb,cascendra,redis ---->unstructured data.data will be in the form of document.
*company :- facebook,paytm .

Mongodb:- it is a cross-platform,document oriented base,high performance,easyly scalable.
It works on the the concept of collection and document.
--------------------------------------------------------------------------------
RDBMS					Mongodb
----------------------------------------------------------------------------------------
Table 		  			collection
Row/Tuple				document
primarykey				default keyid provided by mongodb itself.
table join 				embedded document
-------------------------------------------------------------------------------------------
document :- It is a set of key-value pairs.(JSON format)
collection is a group of mongodb document.
--------------------------------------------------------------------------
example of collection
---------------------------------------
comment:
[
{
user:"Shubham",
message:" Good Morning",    <-----document 1
like:12
},
{
user:"Sunil",
message:" Good Morning",    <------document 2
dislike:1,
like:14
}
]
--------------------------------------------------------------------------------------
create folder :- c:\data\db
---------------------------------------------------------------------------------------

1)to view databases
show databases;
show dbs;
-----------------------------------------------------
2)to switch database and also create database.
use marlabsstud;
---------------------------------------------------------------
3)to create table/collection
db.createCollection('student');
----------------------------------------------------------------------
4)to insert data into the collection
-------------------------------------------------------------------
> db.student.insert({name:'shubham',email:'shubham@gmail.com',emplyee:'marlabs',address:'Kolkotta'});

> db.student.insert({name:'trupti',email:'trupti@gmail.com',emplyee:'marlabs',address:'orissa',pin:'7690012'});

> db.student.insert({name:'deleep',email:'deleep@gmail.com',emplyee:'marlabs',address:'hyd',gender:'male'});

---------------------------------------------------------------------------
5)to display data 
db.student.find();
db.student.find().pretty();

--------------------------------------------------------------------------------------------
 db.student.find().pretty();
{
        "_id" : ObjectId("621f32be2259a0f843d7cffa"),
        "name" : "shubham",
        "email" : "shubham@gmail.com",
        "emplyee" : "marlabs",
        "address" : "Kolkotta"
}
{
        "_id" : ObjectId("621f33162259a0f843d7cffb"),
        "name" : "trupti",
        "email" : "trupti@gmail.com",
        "emplyee" : "marlabs",
        "address" : "orissa",
        "pin" : "7690012"
}
{
        "_id" : ObjectId("621f33552259a0f843d7cffc"),  <-----primary key fields are auto generated
        "name" : "deleep",
        "email" : "deleep@gmail.com",
        "emplyee" : "marlabs",
        "address" : "hyd",
        "gender" : "male"
}

-----------------------------------------------------------------------------------------
6)to update:-
------------------------
db.student.update({name:"deleep" },{$set:{address : "hydrabad"}});
-----------------------------------------------------------------
7)to delete document
------------------------------------
db.student.remove({name:"deleep"});
-------------------------------------------------------------------------------
8)to sort the document
--------------------------------------
ascending
------------------------
db.student.find().sort({name:1}).pretty();
--------------------------------------------
decending
------------------------
db.student.find().sort({name:-1}).pretty();
------------------------------------------------------------------------
ascending
------------------------
db.student.find().sort({address:1}).pretty();
--------------------------------------------
decending
------------------------
db.student.find().sort({address:-1}).pretty();
------------------------------------------------------------------------
9)to drop collection/table

db.student.drop();
----------------------------------------------------------------
10)to drop database
switch into the same database
db.dropDatabase();
--------------------------------------------------------------------------------------------
Blocking and NonBlocking +Synchronous and Asynchronous
--------------------------------------------------------------------------------------------
Blocking +Synchronous communication
--------------------------------------------------------
example-1:- ATM one person goes in the system is blocked.The server will process the transaction and complete the transaction then the other person in the queue will enter the ATM.
During the process the server will be blocked for processing the indivisual person.
---------------------------------------------------------------------------------------------------------------
example-2:- BigBazzar cash counter
At a time in one counter a single person bill will be processed.That time the machine will be blocked.
after the completion the next bill will be prepared.
------------------------------------------------------------------------------------
NonBlocking +Asynchronous communication
-------------------------------------------------------------------------------------
example:- Activation of mobile sim.
It will take 24 hours to activate the sim.
--------------------------------------------------------
example:- job fare,voting
collection 1000 resumes at a time.
-------------------------------------------------------------------------
Blocking +Synchronous communication
------------------------------------------------------------
client server  communication
-----------------------------------------------------------------------------------
 NonBlocking +Asynchronous communication
------------------------------------------------------------------------
To create a nonblocking and Asynchronous communication Projects we have to use Spring Boot Reactive.

for Reactive UI ------------------------ReactJs 
Reactive Server -----------------------Spring web flux.
Reactive DB ---------------------------Spring Data Reactive (Mongodb)
--------------------------------------------------------------------------------------------------
In this the server will not wait for the response from the database it will accept 2nd request,3rd request.....
client will make multiple request without waiting for response from the server.
---------------------------------
spring webflux is a non-blocking web framework.
It handles massive number of concurrent connections.
In this case we will use Netty server incase of tomcat server.
---------------------------------------------------------------------------------------
Mono:- In this return will be 0 or 1 element.
getById(),deleteById()
------------------------------------------------------------------------------------
Flux:-In this case the return will be 0 or n element
List<employee> 
------------------------------------------------------------------------------

pom.xml
--------------------------------------------------------------------------------------------------------
1)spring Reactive web
2)spring data reactive MongoDB
-------------------------------------------------------------------------------------------------------
Example-1
-----------------------
model
-------------
package com.example.demo;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document
public class Employee 
{
@Id
private String empid;
private String sname;
private Double salary;
private String address;
public String getEmpid() {
	return empid;
}
public void setEmpid(String empid) {
	this.empid = empid;
}
public String getSname() {
	return sname;
}
public void setSname(String sname) {
	this.sname = sname;
}
public Double getSalary() {
	return salary;
}
public void setSalary(Double salary) {
	this.salary = salary;
}
public String getAddress() {
	return address;
}
public void setAddress(String address) {
	this.address = address;
}
}
--------------------------------------------------------------------------------------------------
application.properties
----------------------------------
server.port=8088
spring.data.mongodb.host=127.0.0.1
spring.data.mongodb.port=27017
spring.data.mongodb.database=sandip
----------------------------------------------------------------------------------
package com.example.demo;

import org.springframework.data.mongodb.repository.ReactiveMongoRepository;

public interface EmployeeRepository extends ReactiveMongoRepository<Employee, String> 
{
}
------------------------------------------------------------------------------------------------------------
service
--------------
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class EmployeeService 
{
@Autowired
private EmployeeRepository repo;

public Mono<Employee> saveEmployee(Employee s)
{
	return repo.save(s);	
}

public Mono<Employee> fetchOneEmployee(String empid)
{
	return repo.findById(empid).switchIfEmpty(Mono.empty());
}

public Flux<Employee> fetchAllEmployee()
{
	return repo.findAll().switchIfEmpty(Flux.empty());
}

public Mono<Void> deleteEnmployee (String empid)
{
	return repo.deleteById(empid);
}
}

-------------------------------------------------------------------------------------------------
Controller
--------------------
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/employees")
public class EmployeeRestController 
{
@Autowired
private EmployeeService service;

@PostMapping
public Mono<Employee> saveEmployee(@RequestBody Employee employee)
{
	return service.saveEmployee(employee);
}

@GetMapping("/{empid}")
public Mono<Employee> getOneEmployee(@PathVariable String empid)
{
	return service.fetchOneEmployee(empid);
}

@GetMapping
public Flux<Employee> getAllEmployee()
{
	return service.fetchAllEmployee();
}

@DeleteMapping("/{empid}")
public Mono<Void> removeEmployee(@PathVariable String empid)
{
	return service.deleteEnmployee(empid);
}
}
---------------------------------------------------------------------------------------------------
localhost:8088/employees --post 
{
        "sname": "sandip",
        "salary": "56000.50",
        "address":"Bangalore"
    }
------------------------------------------
localhost:8088/employees ----get

to get all employees
-----------------------------------------------------
localhost:8088/employees/621f547473c460125185cd0b  -----get

to get employeeById
--------------------------------------------------
localhost:8088/employees/621f547473c460125185cd0b  -----delete

to delete employeeById
---------------------------------------------------------------------------------------
pom.xml
--------------------
<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>
</dependency>
<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
</dependency>
-----------------------------------------------------------------------------------------------------------------















